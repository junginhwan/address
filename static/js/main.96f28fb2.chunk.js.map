{"version":3,"sources":["pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Contact","useState","name","phone","form","setForm","contacts","setContacts","handleChange","e","target","value","span","placeholder","onChange","type","onClick","length","datas","concat","alert","header","footer","bordered","dataSource","renderItem","contact","Item","style","cursor","onDoubleClick","filter","current","handleDoubleClick","Text","mark","Header","Layout","Footer","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAqIeA,EAjIC,WAAO,IAAD,EACIC,mBAAS,CAC/BC,KAAM,GACNC,MAAO,KAHW,mBACbC,EADa,KACPC,EADO,OAKYJ,mBAAS,CACvC,CACEC,KAAM,SACNC,MAAO,eAET,CACED,KAAM,eACNC,MAAO,eAET,CACED,KAAM,SACNC,MAAO,eAET,CACED,KAAM,SACNC,MAAO,eAET,CACED,KAAM,eACNC,MAAO,iBAxBS,mBAKbG,EALa,KAKHC,EALG,KAkDdC,EAAe,SAAAC,GACnBJ,EAAQ,eACHD,EADE,eAEJK,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,UAW9B,OACE,oCACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CACEV,KAAK,OACLW,YAAY,eACZC,SAAUN,EACVG,MAAOP,EAAKF,QAGhB,kBAAC,IAAD,CAAKU,KAAM,IACT,kBAAC,IAAD,CACEV,KAAK,QACLW,YAAY,2BACZC,SAAUN,EACVG,MAAOP,EAAKD,SAGhB,kBAAC,IAAD,CAAKS,KAAM,GACT,kBAAC,IAAD,CAAQG,KAAK,UAAUC,QAzDb,SAAAP,GAAM,IAChBP,EAAgBE,EAAhBF,KAAMC,EAAUC,EAAVD,MACd,GAAoB,IAAhBD,EAAKe,OAIT,GAAqB,IAAjBd,EAAMc,OAAV,CAIA,IAAMC,EAAQZ,EAASa,OAAO,CAC5BjB,OACAC,UAEFI,EAAYW,GACZb,EAAQ,eACHD,EADE,CAELF,KAAM,GACNC,MAAO,WAXPiB,MAAM,uEAJNA,MAAM,wDAsDA,mBAMN,kBAAC,IAAD,CACEC,OAAQ,mDACRC,OACE,6BACE,4BACE,kFACA,qEACA,+FACA,4FACA,0FACA,4GACA,mFAINC,UAAQ,EACRC,WAAYlB,EACZmB,WAAY,SAAAC,GAAO,OACjB,kBAAC,IAAKC,KAAN,CACEC,MAAO,CAAEC,OAAQ,WACjBC,cAAe,YAtDC,SAAA3B,GACxB,IAAMe,EAAQZ,EAASyB,QAAO,SAAAC,GAC5B,OAAOA,EAAQ7B,QAAUA,KAE3BI,EAAYW,GAmDFe,CAAkBP,EAAQvB,SAG5B,kBAAC,IAAW+B,KAAZ,CAAiBC,MAAI,GAAET,EAAQxB,MAAwB,IACtDwB,EAAQvB,YCnHbiC,G,OAA4BC,IAA5BD,QAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QAgBTC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAACJ,EAAD,2BACA,kBAAC,IAAD,KACE,kBAACG,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACD,EAAD,iBCJcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96f28fb2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { List, Typography, Input, Row, Col, Button } from \"antd\";\r\n\r\nconst Contact = () => {\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n    phone: \"\"\r\n  });\r\n  const [contacts, setContacts] = useState([\r\n    {\r\n      name: \"딸\",\r\n      phone: \"01011112222\"\r\n    },\r\n    {\r\n      name: \"아내\",\r\n      phone: \"01022223333\"\r\n    },\r\n    {\r\n      name: \"나\",\r\n      phone: \"01033334444\"\r\n    },\r\n    {\r\n      name: \"형\",\r\n      phone: \"01044445555\"\r\n    },\r\n    {\r\n      name: \"엄마\",\r\n      phone: \"01055556666\"\r\n    }\r\n  ]);\r\n\r\n  const handleClick = e => {\r\n    const { name, phone } = form;\r\n    if (name.length === 0) {\r\n      alert(\"이름을 입력하세요.\");\r\n      return;\r\n    }\r\n    if (phone.length === 0) {\r\n      alert(\"전화번호를 입력하세요.\");\r\n      return;\r\n    }\r\n    const datas = contacts.concat({\r\n      name,\r\n      phone\r\n    });\r\n    setContacts(datas);\r\n    setForm({\r\n      ...form,\r\n      name: \"\",\r\n      phone: \"\"\r\n    });\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleDoubleClick = phone => {\r\n    const datas = contacts.filter(current => {\r\n      return current.phone !== phone;\r\n    });\r\n    setContacts(datas);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Row>\r\n          <Col span={10}>\r\n            <Input\r\n              name=\"name\"\r\n              placeholder=\"이름\"\r\n              onChange={handleChange}\r\n              value={form.name}\r\n            ></Input>\r\n          </Col>\r\n          <Col span={10}>\r\n            <Input\r\n              name=\"phone\"\r\n              placeholder=\"전화번호\"\r\n              onChange={handleChange}\r\n              value={form.phone}\r\n            ></Input>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={handleClick}>\r\n              등록\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n      <List\r\n        header={<div>주소록</div>}\r\n        footer={\r\n          <div>\r\n            <ul>\r\n              <li>간단히 만든 주소록</li>\r\n              <li>리액트로 구현</li>\r\n              <li>expo로 Ios / And에서도 사용가능</li>\r\n              <li>디자인은 antd 라이브러리</li>\r\n              <li>gh-pages 로 빌드 후 github.io 등록</li>\r\n              <li>localStorage 로 저장해도 되는데 귀찮</li>\r\n              <li>더블클릭시 삭제됨</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        bordered\r\n        dataSource={contacts}\r\n        renderItem={contact => (\r\n          <List.Item\r\n            style={{ cursor: \"pointer\" }}\r\n            onDoubleClick={() => {\r\n              handleDoubleClick(contact.phone);\r\n            }}\r\n          >\r\n            <Typography.Text mark>{contact.name}</Typography.Text>{\" \"}\r\n            {contact.phone}\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string,\r\n  phone: PropTypes.number\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport Contact from \"./pages/Contact\";\nimport \"antd/dist/antd.css\";\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Header>주소록</Header>\n      <Layout>\n        <Content>\n          <Contact></Contact>\n        </Content>\n      </Layout>\n      <Footer>Footer</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}